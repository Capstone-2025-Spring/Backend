name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. GitHub Secret으로부터 application.yml 복원
      - name: Restore application.yml from GitHub Secret
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | sed 's/\\n/\n/g' > ./src/main/resources/application.yml

      # 3. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 5. Gradle 빌드 (캐시 무효화 포함)
      - name: Clean and Build with Gradle
        run: ./gradlew clean build

      # 6. 빌드된 JAR 파일 확인
      - name: Debug - JAR 확인
        run: ls -lh build/libs

      # 7. EC2 SSH 키 파일 저장
      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      # 8. EC2에 JAR 복사 (정확한 위치로)
      - name: Upload JAR to EC2
        run: |
          scp -i ec2-key.pem \
              -o StrictHostKeyChecking=no \
              build/libs/backend-0.0.1-SNAPSHOT.jar \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app/build/libs/backend-0.0.1-SNAPSHOT.jar

      # ✅ 9. Python 서버 코드 업로드 (venv 제외, 강제 동기화)
      - name: Upload Python server code
        run: |
          rsync -avz --checksum --delete --exclude 'venv' ./python_server/ \
            -e "ssh -i ec2-key.pem -o StrictHostKeyChecking=no" \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/python_server/
        

        # ✅ 10. Python 의존성 설치 및 서비스 재시작
      - name: Restart Python server only (reuse venv)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "🐍 Python 서버 재시작 (venv 재사용)"
            cd /home/ec2-user/python_server
            source venv/bin/activate
            sudo systemctl restart python.service

      # 11. Spring 백엔드 서비스 재시작
      - name: Restart backend service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "🛠 Spring 서비스 재시작"
            sudo systemctl daemon-reexec
            sudo systemctl restart lecture.service

      # 12. ✅ EC2의 JAR 타임스탬프 확인
      - name: ✅ EC2의 JAR 타임스탬프 확인
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "🗂 최신 JAR 정보:"
            ls -lh /home/ec2-user/app/build/libs/backend-0.0.1-SNAPSHOT.jar

      # ✅ 13. Python 주요 파일 SHA256 확인
      - name: 📄 Python 코드 SHA256 체크섬 확인
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "🔐 app.py SHA256:"
            sha256sum /home/ec2-user/python_server/app.py || echo "⚠️ app.py 없음"
            echo "🔐 run_captioning.py SHA256:"
            sha256sum /home/ec2-user/python_server/video_caption_generator/run_captioning.py || echo "⚠️ run_captioning.py 없음"

      # ✅ 14. Python 서비스 상태 확인
      - name: 🧪 Flask 서버 상태 점검
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "📡 python.service 상태 확인"
            sudo systemctl status python.service --no-pager
